AC_INIT(beagled/BeagleDaemon.cs)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(beagle, 0.0.5)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_PROG_INSTALL
AM_PROG_LIBTOOL
AC_PROG_CXX

VERSION=${VERSION}
AC_SUBST(VERSION)

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi


if test "x$MCSTEST" = "xno"; then
	AC_MSG_ERROR([You need to install mcs (from mono)])
fi

dnl ******************
dnl Mozilla name check
dnl ******************
 
AC_MSG_CHECKING([which mozilla to use])
 
MOZILLA=
AC_ARG_WITH([mozilla],
        AC_HELP_STRING([--with-mozilla@<:@=mozilla|firefox|thunderbird@:>@],
                       [Whether to use mozilla, firefox or thunderbird gtkmozembed (default: mozilla)]),
        [MOZILLA="$withval"])

dnl try to autodetect: if mozilla exists, use it, else try firefox, then thunderbird
if test "x$MOZILLA" = "x"; then
  if pkg-config --exists mozilla-gtkmozembed; then
    MOZILLA=mozilla
  elif pkg-config --exists firefox-gtkmozembed; then
    MOZILLA=firefox
  elif pkg-config --exists thunderbird-gtkmozembed; then
    MOZILLA=thunderbird
  else
    AC_MSG_ERROR([no mozilla installation found])
  fi
elif test "x$with_mozilla" != "xmozilla" -a "x$with_mozilla" != "xfirefox" -a "x$with_mozilla" != "xthunderbird"; then
  AC_MSG_ERROR([unknown mozilla name ($MOZILLA)])
fi
                                                                                
AC_SUBST(MOZILLA)
                                                                                
AC_MSG_RESULT([$MOZILLA])

case "$MOZILLA" in
mozilla) min_version=1.6 flavour=mozilla ;;
firefox) min_version=0.10 flavour=toolkit ;;
thunderbird) min_version=0.8 flavour=toolkit ;;
esac

MOZILLA_FLAVOUR=$flavour
AC_SUBST(MOZILLA_FLAVOUR)
PKG_CHECK_MODULES(MOZILLA_COMPONENT, $MOZILLA-gtkmozembed >= $min_version $MOZILLA-xpcom >= $min_version)
AC_SUBST(MOZILLA_COMPONENT_CFLAGS)
AC_SUBST(MOZILLA_COMPONENT_LIBS)
                                                                                
MOZILLA_INCLUDE_ROOT="`$PKG_CONFIG --variable=includedir $MOZILLA-gtkmozembed`"
AC_SUBST(MOZILLA_INCLUDE_ROOT)
 
MOZILLA_HOME="`$PKG_CONFIG --variable=libdir $MOZILLA-gtkmozembed`"
AC_SUBST(MOZILLA_HOME)
                                                                                
MOZILLA_PREFIX="`$PKG_CONFIG --variable=prefix $MOZILLA-gtkmozembed`"
AC_SUBST(MOZILLA_PREFIX)



dnl *************************************************************************
dnl This is from Mozilla's configure.in. They set almost all the config stuff
dnl they need in mozilla-config.h Except for this compiler flag, which can't
dnl go in mozilla-config.h So we check the flag too and now we can include
dnl mozilla-config.h without breaking epiphany.
dnl This is really gcc-only
dnl Do this test using CXX only since some versions of gcc
dnl 2.95-2.97 have a signed wchar_t in c++ only and some versions
dnl only have short-wchar support for c++.
AC_LANG_PUSH(C++)
_SAVE_CXXFLAGS=$CXXFLAGS
_SAVE_AM_CXXFLAGS=$AM_CXXFLAGS
AM_CXXFLAGS="$AM_CXXFLAGS -fshort-wchar"
CXXFLAGS="$CXXFLAGS $AM_CXXFLAGS"


AC_CACHE_CHECK(for compiler -fshort-wchar option,
    ac_cv_have_usable_wchar_option,
    [AC_TRY_RUN([#include <stddef.h>
                 int main () {
                   return (sizeof(wchar_t) != 2) ||
                          (wchar_t)-1 < (wchar_t) 0 ; } ],
                ac_cv_have_usable_wchar_option="yes",
                ac_cv_have_usable_wchar_option="no",
                ac_cv_have_usable_wchar_option="maybe")])
                                                                                
if test "$ac_cv_have_usable_wchar_option" != "yes"; then
    AM_CXXFLAGS=$_SAVE_AM_CXXFLAGS
fi

dnl **********************************
dnl now tests for mozilla API variance
dnl **********************************
                                                                                
dnl FIXME find a m4/autoconf guru who can distill this into a nice macro
                                                                                
CXXFLAGS="$_SAVE_CXXFLAGS $AM_CXXFLAGS -I$MOZILLA_INCLUDE_ROOT -I$MOZILLA_INCLUDE_ROOT/embedstring -I$MOZILLA_INCLUDE_ROOT/content -I$MOZILLA_INCLUDE_ROOT/necko `pkg-config --cflags $MOZILLA-xpcom`"
                                                                                
dnl Changed from PRUnichar* to nsAString& in 1.8a1 and on aviary branch
                                                                                
AC_MSG_CHECKING([whether nsIFilePicker methods expect nsAString&])
                                                                                AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
                [[#include <nsEmbedString.h>
                  #include <widget/nsIFilePicker.h>]],
                [[nsIFilePicker *p;
                  p->SetDefaultString (nsEmbedString());]]
        )],
        [AC_DEFINE([MOZ_NSIFILEPICKER_NSASTRING_],[1],[Define if nsIFilePicker uses nsAString&]) result=yes],
        [result=no])
                                                                                
AC_MSG_RESULT([$result])
                                                                                
dnl Changed from char* to nsAString& in 1.8a1
                                                                                
AC_MSG_CHECKING([whether nsIMIMEInfo methods expect nsAString&])
                                                                                
AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
                [[#include <nsEmbedString.h>
                  #include <mimetype/nsIMIMEInfo.h>]],
                [[nsIMIMEInfo *p;
                  p->SetDescription (nsEmbedString());]]
        )],
        [AC_DEFINE([MOZ_NSIMIMEINFO_NSACSTRING_],[1],[Define if nsIMIMEInfo uses nsAString&]) result=yes],
        [result=no])
                                                                                
AC_MSG_RESULT([$result])
                                                                                
dnl Firefox doesn't have this API (?)
                                                                                
AC_MSG_CHECKING([for nsIXULChromeRegistry API])

AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
                [[#include <nsEmbedString.h>
                  #include <nsIChromeRegistry.h>]],
                [[nsIXULChromeRegistry *p;
                  p->SelectSkin (nsEmbedCString(), PR_FALSE);]]
        )],
        [AC_DEFINE([MOZ_NSIXULCHROMEREGISTRY_SELECTSKIN],[1],[dummy]) result=yes],
        [result=no])                                                                                
AC_MSG_RESULT([$result])

dnl changed from nsIXULChromeRegistry in 1.8a4
                                                                                
AC_CHECK_FILE([$MOZILLA_INCLUDE_ROOT/chrome/nsIChromeRegistrySea.h],
        [AC_DEFINE([HAVE_CHROME_NSICHROMEREGISTRYSEA_H], [1], [Define if nsIChromeRegistrySea.h exists])])
                                                                                
MOZILLA_WARN_CXXFLAGS="-Wall -Wconversion -Wpointer-arith -Wcast-align -Woverloaded-virtual -Wsynth -Wno-ctor-dtor-privacy -Wno-non-virtual-dtor"
AC_SUBST(MOZILLA_WARN_CXXFLAGS)

dnl -------------------------------------------------------

PKG_CHECK_MODULES(LIBGECKOGLUE, gtk+-2.0 >= 2.2 $MOZILLA-gtkmozembed)
AC_SUBST(LIBGECKOGLUE_CFLAGS)
AC_SUBST(LIBGECKOGLUE_LIBS)			

dnl -------------------------------------------------------

PKG_CHECK_MODULES(BEAGLE_UI, gtk-sharp gecko-sharp gnome-sharp dbus-sharp gconf-sharp gmime-sharp)
AC_SUBST(BEAGLE_UI_LIBS)

dnl ----------------------------------------------

# Gdk and Atk are needed for libtrayiconglue
GDK20_MINIMUM_VERSION=2.2.3
ATK_MINIMUM_VERSION=1.2.4

PKG_CHECK_MODULES(LIBTRAYICON,
		  gdk-2.0 >= $GDK20_MINIMUM_VERSION
		  atk >= $ATK_MINIMUM_VERSION)
AC_SUBST(LIBTRAYICON_CFLAGS)
AC_SUBST(LIBTRAYICON_LIBS)

dnl ----------------------------------------------

EVOLUTION_SHARP_REQUIRED_VERSION=0.6
PKG_CHECK_MODULES(EVO_SHARP,						\
                  evolution-sharp >= $EVOLUTION_SHARP_REQUIRED_VERSION, \
                  enable_evo_sharp=yes,					\
		  enable_evo_sharp=no)
AC_SUBST(EVO_SHARP_LIBS)

AM_CONDITIONAL(ENABLE_EVO_SHARP, test "x$enable_evo_sharp" = "xyes")

EVO_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix evolution-sharp`

dnl ----------------------------------------------

AC_ARG_ENABLE([network],
        [  --enable-network       Enable Network Service ],
        enable_network=yes,
        enable_network=no)

AM_CONDITIONAL(ENABLE_NETWORK, test "x$enable_network" = "xyes")

if test "x$enable_network" = "xyes"; then
        PKG_CHECK_MODULES(RENDEZVOUS,					\
		          mdnsresponder,				\
			  enable_rendezvous=yes,			\
			  enable_rendezvous=no)
        AC_SUBST(RENDEZVOUS_LIBS)

	AM_CONDITIONAL(ENABLE_RENDEZVOUS, test "x$enable_rendezvous" = "xyes")

	RENDEZVOUS_PREFIX=`$PKG_CONFIG --variable=prefix mdnsresponder`
else
	AM_CONDITIONAL(ENABLE_RENDEZVOUS, false)
fi


dnl ----------------------------------------------

dnl beagled

PKG_CHECK_MODULES(GSF_SHARP, gsf-sharp >= 0.2, enable_gsf_sharp=yes, enable_gsf_sharp=no)
AM_CONDITIONAL(ENABLE_GSF_SHARP, test "x$enable_gsf_sharp" = "xyes")

PKG_CHECK_MODULES(GST_SHARP, gst-sharp, enable_gst_sharp=yes, enable_gst_sharp=no)
AM_CONDITIONAL(ENABLE_GST_SHARP, test "x$enable_gst_sharp" = "xyes")

PKG_CHECK_MODULES(BEAGLED, gmime-sharp gtk-sharp dbus-sharp gconf-sharp)
BEAGLED_LIBS="$BEAGLED_LIBS $EVO_SHARP_LIBS $GSF_SHARP_LIBS"
AC_SUBST(BEAGLED_LIBS)

DBUS_PREFIX=`$PKG_CONFIG --variable=prefix dbus-sharp`
GSF_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix gsf-sharp`
GMIME_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix gmime-sharp`

dnl ----------------------------------------------

dnl Epiphany Extension
dnl Much of this is cut&pasted from epiphany-extensions/configure.ac

AC_ARG_ENABLE([epiphany-extension],
	[  --enable-epiphany-extension   Enable Epiphany Extension ],
	enable_epiphany_extension=$enableval,
	enable_epiphany_extension=yes)

EPIPHANY_REQUIRED=1.2.1
LIBXML_REQUIRED=2.6.0
LIBGLIB_REQUIRED=2.4.0
LIBGTK_REQUIRED=2.4.0

AC_SUBST(EPIPHANY_REQUIRED)
AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(LIBGLIB_REQUIRED)
AC_SUBST(LIBGTK_REQUIRED)

GTK_BINARY_VERSION=`$PKG_CONFIG --variable=gtk_binary_version gtk+-2.0`
AC_SUBST(GTK_BINARY_VERSION)

dnl fixme -- combine the dependencies of only the enabled plugins
PKG_CHECK_MODULES(EPIPHANY_DEPENDENCY, \
		  libxml-2.0 >= $LIBXML_REQUIRED \
		  libglade-2.0 \
		  glib-2.0 >= $LIBGLIB_REQUIRED \
		  gmodule-2.0 \
		  gtk+-2.0 >= $LIBGTK_REQUIRED \
		  epiphany-1.2 >= $EPIPHANY_REQUIRED,
		  have_epiphany_dependencies=yes,
		  have_epiphany_dependencies=no)
AC_SUBST(EPIPHANY_DEPENDENCY_CFLAGS)
AC_SUBST(EPIPHANY_DEPENDENCY_LIBS)

EPIPHANY_PREFIX="`$PKG_CONFIG --variable=prefix epiphany-1.2`"
AC_SUBST(EPIPHANY_PREFIX)

if test "x$have_epiphany_dependencies" = "xno"; then
   enable_epiphany_extension="no (missing dependencies)"
else
	if test "x$enable_epiphany_extension" != "xyes"; then
	   enable_epiphany_extension="disabled"
	fi
fi

AM_CONDITIONAL(ENABLE_EPIPHANY_EXTENSION, test "x$enable_epiphany_extension" = "xyes")

dnl ----------------------------------------------

dnl For the systeminfo glue

PKG_CHECK_MODULES(SYSTEMINFO_GLUE, gdk-2.0)
AC_PATH_XTRA
SYSTEMINFO_GLUE_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXss $X_EXTRA_LIBS"
AC_SUBST(SYSTEMINFO_GLUE_X_LIBS)

dnl ----------------------------------------------

dnl For the wv1 glue

PKG_CHECK_MODULES(WV1, wv-1.0, enable_wv1=yes, enable_wv1=no)
AM_CONDITIONAL(ENABLE_WV1, test "x$enable_wv1" = "xyes")
AC_SUBST(WV1_LIBS)

dnl ----------------------------------------------

dnl Searchomatic

PKG_CHECK_MODULES(SEARCHOMATIC, gtk+-2.0)
AC_SUBST(SEARCHOMATIC_CFLAGS)
AC_SUBST(SEARCHOMATIC_LIBS)

dnl ----------------------------------------------

dnl Chooser-fu

PKG_CHECK_MODULES(CHOOSER_FU, gtk+-2.0)
AC_SUBST(CHOOSER_FU_CFLAGS)
AC_SUBST(CHOOSER_FU_LIBS)

dnl ----------------------------------------------

dnl Prefixes for helper scripts
GAC_PREFIX="$DBUS_PREFIX:$EVO_SHARP_PREFIX:$GSF_SHARP_PREFIX:$GMIME_SHARP_PREFIX:$RENDEZVOUS_PREFIX"
dnl Remove duplicate prefixes
GAC_PREFIX="`echo $GAC_PREFIX | sed -e 's|:|\n|g' | sort | uniq | tr '\n' ':'`"
dnl Remove stray :s
GAC_PREFIX="`echo $GAC_PREFIX | sed -e 's|::\+|:|g' -e 's|^:\+||' -e 's|:\+$||'`"
AC_SUBST(GAC_PREFIX)

AC_OUTPUT([
Makefile
Util/Makefile
images/Makefile
templates/Makefile
glue/Makefile
BeagleClient/Makefile
beagled/Makefile
Filters/Makefile
Tiles/Makefile
tools/Makefile
Best/Makefile
epiphany-extension/Makefile
mozilla-extension/Makefile
searchomatic/Makefile
chooser-fu/Makefile
beagle-0.0.pc
beagle.spec
])

echo "
	Prefix:			${prefix}
	Evolution-Sharp?	${enable_evo_sharp}
	gsf-sharp?		${enable_gsf_sharp}
	gst-sharp?		${enable_gst_sharp}
	Epiphany Extension?	${enable_epiphany_extension}
	Mozilla Extension?	yes
	wv1?			${enable_wv1}

	Enable Network		${enable_network}"

if test "x$enable_network" = "xyes"; then
   echo "	Enable Rendezvous	${enable_rendezvous}"
fi

echo 

if test "x$enable_epiphany_extension" = "xyes"; then
   echo "NOTE: The Beagle Epiphany Extension Is Totally Insecure!"
   echo "      Use it at your own risk!"
   echo

   if test "x${prefix}" != "x$EPIPHANY_PREFIX"; then
      echo "NOTE: Epiphany seems to be installed in $EPIPHANY_PREFIX, not ${prefix}."
      echo "      Epiphany will not be able to find Beagle's Epiphany Extension"
      echo "      unless you do something like:"
      echo "      # ln -s ${prefix}/lib/epiphany/extensions/libbeagleextension.so \\"
      echo "        $EPIPHANY_PREFIX/lib/epiphany/extensions"
   fi
fi

	
