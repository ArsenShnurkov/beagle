AC_INIT(beagled/BeagleDaemon.cs)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(beagle, 0.0.13)
AM_MAINTAINER_MODE
AM_CONFIG_HEADER(config.h)

AC_PROG_INSTALL
AM_PROG_LIBTOOL
AC_PROG_CXX

VERSION=${VERSION}
AC_SUBST(VERSION)

AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$PKG_CONFIG" = "xno"; then
	AC_MSG_ERROR([You need to install pkg-config])
fi

AC_PATH_PROG(BASH, bash)
AC_SUBST(BASH)

# mozilla extension uses zip to create the jar/xpi files
AC_PATH_PROG(ZIP, zip)

AC_PATH_PROG(MONO, mono)
AC_PATH_PROG(MCS, mcs)

AC_MSG_CHECKING([for mono.pc])
if test -z `$PKG_CONFIG --variable=prefix mono`; then
  AC_MSG_ERROR([missing the mono.pc file, usually found in the mono-devel package])
else
  AC_MSG_RESULT([found])
fi

# require mono 1.0.6 or newer
PKG_CHECK_MODULES(MONO, mono >= 1.0.6) 

# check for various mono DLLs that we need.
needed_dlls="Mono.Data.SqliteClient Mono.Posix System.Runtime.Remoting System.Web System.Web.Services"
for i in $needed_dlls; do
  AC_MSG_CHECKING([for $i.dll])
  if test ! -e `$PKG_CONFIG --variable=prefix mono`/lib/mono/1.0/$i.dll; then
    AC_MSG_ERROR([missing required mono DLL: $i.dll])
  else
    AC_MSG_RESULT([found])
  fi
done

# check for OS
case "$target" in
  *-*-linux*)
    os=linux
    AC_CHECK_LIB(attr, lsetxattr, XATTR_LIB="libattr",)
    AC_CHECK_FUNC(lsetxattr, XATTR_LIB="libc",)
    ;;
  *-*-freebsd*)
    os=freebsd
    AC_CHECK_FUNC(extattr_set_link, XATTR_LIB="libc")	
    ;;
  *)
    AC_MSG_ERROR([Unrecognised target OS: $target])
    ;;
esac
AM_CONDITIONAL(OS_LINUX, test "x$os" = "xlinux")
AM_CONDITIONAL(OS_FREEBSD, test "x$os" = "xfreebsd")

# check for xattr implementation
if test "x$XATTR_LIB" = "x"; then
    AC_MSG_ERROR([Could not find a support extended attribute implementation (tried libc and libattr)])
fi
AC_SUBST(XATTR_LIB)

# check for desktop-launch

AC_PATH_PROG(DESKTOP_LAUNCH, desktop-launch, no)
AM_CONDITIONAL(ENABLE_DESKTOP_LAUNCH, test "x$DESKTOP_LAUNCH" != "xno")

# check for wsdl
AC_PATH_PROG(WSDL, wsdl)

#
# I18N
#

AC_PROG_INTLTOOL([0.23])
GETTEXT_PACKAGE=beagle
AC_SUBST(GETTEXT_PACKAGE)
ALL_LINGUAS="bg ca da de el en_CA en_GB es fr hu ja nb nl no pl pt_BR sv tr uk zh_CN zh_TW"
AM_GLIB_GNU_GETTEXT

# Many distros don't have a dependency on sqlite for their
# mono-data-sqlite packages, and the mono build process itself
# doesn't require it.  But we do, so check for it here.
PKG_CHECK_MODULES(SQLITE, sqlite, have_sqlite2="yes", have_sqlite2="no")
PKG_CHECK_MODULES(SQLITE, sqlite3, have_sqlite3="yes", have_sqlite3="no")

if test "x$have_sqlite2" = "xno" -a "x$have_sqlite3" = "xno"; then
	AC_MSG_ERROR([You need to install either sqlite2 or sqlite3])
fi

# Needed by glue/screensaver-glue.c
# The OLD_CFLAGS/CFLAGS hack is needed to build on Ubuntu Breezy Badger 
OLD_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -I/usr/X11R6/include"
AC_CHECK_HEADER(X11/extensions/scrnsaver.h,, [AC_MSG_ERROR([Unable to find scrnsaver.h.  You probably need to install XFree86 development packages])])
CFLAGS="$OLD_CFLAGS"

# We pinvoke into gnome-vfs directly from Util/gnome.cs and Util/Vfs.cs, and
# we get the GNOME prefix from libgnome-2.0
PKG_CHECK_MODULES(GNOME_VFS, gnome-vfs-2.0 libgnome-2.0)

dnl ******************
dnl Mozilla name check
dnl ******************
 
AC_MSG_CHECKING([which mozilla to use])
 
MOZILLA=
AC_ARG_WITH([mozilla],
        AC_HELP_STRING([--with-mozilla@<:@=mozilla|firefox|thunderbird@:>@],
                       [Whether to use mozilla, firefox or thunderbird gtkmozembed (default: mozilla)]),
        [MOZILLA="$withval"])

dnl try to autodetect: if mozilla exists, use it, else try firefox, then thunderbird
if test "x$MOZILLA" = "x"; then
  if pkg-config --exists mozilla-gtkmozembed; then
    MOZILLA=mozilla
  elif pkg-config --exists firefox-gtkmozembed; then
    MOZILLA=firefox
  elif pkg-config --exists thunderbird-gtkmozembed; then
    MOZILLA=thunderbird
  else
    AC_MSG_ERROR([unable to find gtkmozembed; this can be found in mozilla/firefox/thunderbird development packages])
  fi
elif test "x$with_mozilla" != "xmozilla" -a "x$with_mozilla" != "xfirefox" -a "x$with_mozilla" != "xthunderbird"; then
  AC_MSG_ERROR([unknown mozilla name ($MOZILLA)])
fi
                                                                                
AC_SUBST(MOZILLA)
                                                                                
AC_MSG_RESULT([$MOZILLA])

case "$MOZILLA" in
mozilla) min_version=1.6 flavour=mozilla ;;
firefox) min_version=0.10 flavour=toolkit ;;
thunderbird) min_version=0.8 flavour=toolkit ;;
esac

MOZILLA_FLAVOUR=$flavour
AC_SUBST(MOZILLA_FLAVOUR)
PKG_CHECK_MODULES(MOZILLA_COMPONENT, $MOZILLA-gtkmozembed >= $min_version $MOZILLA-xpcom >= $min_version)
AC_SUBST(MOZILLA_COMPONENT_CFLAGS)
AC_SUBST(MOZILLA_COMPONENT_LIBS)
                                                                                
MOZILLA_INCLUDE_ROOT="`$PKG_CONFIG --variable=includedir $MOZILLA-gtkmozembed`"
AC_SUBST(MOZILLA_INCLUDE_ROOT)
 
MOZILLA_HOME="`$PKG_CONFIG --variable=libdir $MOZILLA-gtkmozembed`"
AC_SUBST(MOZILLA_HOME)
                                                                                
MOZILLA_PREFIX="`$PKG_CONFIG --variable=prefix $MOZILLA-gtkmozembed`"
AC_SUBST(MOZILLA_PREFIX)



dnl *************************************************************************
dnl This is from Mozilla's configure.in. They set almost all the config stuff
dnl they need in mozilla-config.h Except for this compiler flag, which can't
dnl go in mozilla-config.h So we check the flag too and now we can include
dnl mozilla-config.h without breaking epiphany.
dnl This is really gcc-only
dnl Do this test using CXX only since some versions of gcc
dnl 2.95-2.97 have a signed wchar_t in c++ only and some versions
dnl only have short-wchar support for c++.
AC_LANG_PUSH(C++)
_SAVE_CXXFLAGS=$CXXFLAGS
_SAVE_AM_CXXFLAGS=$AM_CXXFLAGS
AM_CXXFLAGS="$AM_CXXFLAGS -fshort-wchar"
CXXFLAGS="$CXXFLAGS $AM_CXXFLAGS"


AC_CACHE_CHECK(for compiler -fshort-wchar option,
    ac_cv_have_usable_wchar_option,
    [AC_TRY_RUN([#include <stddef.h>
                 int main () {
                   return (sizeof(wchar_t) != 2) ||
                          (wchar_t)-1 < (wchar_t) 0 ; } ],
                ac_cv_have_usable_wchar_option="yes",
                ac_cv_have_usable_wchar_option="no",
                ac_cv_have_usable_wchar_option="maybe")])
                                                                                
if test "$ac_cv_have_usable_wchar_option" != "yes"; then
    AM_CXXFLAGS=$_SAVE_AM_CXXFLAGS
fi

dnl **********************************
dnl now tests for mozilla API variance
dnl **********************************
                                                                                
dnl FIXME find a m4/autoconf guru who can distill this into a nice macro
                                                                                
CXXFLAGS="$_SAVE_CXXFLAGS $AM_CXXFLAGS -I$MOZILLA_INCLUDE_ROOT -I$MOZILLA_INCLUDE_ROOT/embedstring -I$MOZILLA_INCLUDE_ROOT/content -I$MOZILLA_INCLUDE_ROOT/necko `pkg-config --cflags $MOZILLA-xpcom`"
                                                                                
dnl Changed from PRUnichar* to nsAString& in 1.8a1 and on aviary branch
                                                                                
AC_MSG_CHECKING([whether nsIFilePicker methods expect nsAString&])
                                                                                AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
                [[#include <nsEmbedString.h>
                  #include <widget/nsIFilePicker.h>]],
                [[nsIFilePicker *p;
                  p->SetDefaultString (nsEmbedString());]]
        )],
        [AC_DEFINE([MOZ_NSIFILEPICKER_NSASTRING_],[1],[Define if nsIFilePicker uses nsAString&]) result=yes],
        [result=no])
                                                                                
AC_MSG_RESULT([$result])
                                                                                
dnl Changed from char* to nsAString& in 1.8a1
                                                                                
AC_MSG_CHECKING([whether nsIMIMEInfo methods expect nsAString&])
                                                                                
AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
                [[#include <nsEmbedString.h>
                  #include <mimetype/nsIMIMEInfo.h>]],
                [[nsIMIMEInfo *p;
                  p->SetDescription (nsEmbedString());]]
        )],
        [AC_DEFINE([MOZ_NSIMIMEINFO_NSACSTRING_],[1],[Define if nsIMIMEInfo uses nsAString&]) result=yes],
        [result=no])
                                                                                
AC_MSG_RESULT([$result])
                                                                                
dnl Firefox doesn't have this API (?)
                                                                                
AC_MSG_CHECKING([for nsIXULChromeRegistry API])

AC_COMPILE_IFELSE(
        [AC_LANG_PROGRAM(
                [[#include <nsEmbedString.h>
                  #include <nsIChromeRegistry.h>]],
                [[nsIXULChromeRegistry *p;
                  p->SelectSkin (nsEmbedCString(), PR_FALSE);]]
        )],
        [AC_DEFINE([MOZ_NSIXULCHROMEREGISTRY_SELECTSKIN],[1],[dummy]) result=yes],
        [result=no])
AC_MSG_RESULT([$result])

dnl changed from nsIXULChromeRegistry in 1.8a4
                                                                                
AC_CHECK_FILE([$MOZILLA_INCLUDE_ROOT/chrome/nsIChromeRegistrySea.h],
        [AC_DEFINE([HAVE_CHROME_NSICHROMEREGISTRYSEA_H], [1], [Define if nsIChromeRegistrySea.h exists])])
                                                                                
MOZILLA_WARN_CXXFLAGS="-Wall -Wconversion -Wpointer-arith -Wcast-align -Woverloaded-virtual -Wsynth -Wno-ctor-dtor-privacy -Wno-non-virtual-dtor"
AC_SUBST(MOZILLA_WARN_CXXFLAGS)

dnl -------------------------------------------------------

PKG_CHECK_MODULES(LIBGECKOGLUE, gtk+-2.0 >= 2.2 $MOZILLA-gtkmozembed)
AC_SUBST(LIBGECKOGLUE_CFLAGS)
AC_SUBST(LIBGECKOGLUE_LIBS)

dnl -------------------------------------------------------

PKG_CHECK_MODULES(BEAGLE_UI, gtk-sharp glade-sharp gecko-sharp = 0.6 gnome-sharp gconf-sharp gmime-sharp >= 2.1.15)
AC_SUBST(BEAGLE_UI_LIBS)

dnl ----------------------------------------------

# Gdk and Atk are needed for libtrayiconglue
GDK20_MINIMUM_VERSION=2.2.3
ATK_MINIMUM_VERSION=1.2.4

PKG_CHECK_MODULES(LIBTRAYICON,
		  gdk-2.0 >= $GDK20_MINIMUM_VERSION
		  atk >= $ATK_MINIMUM_VERSION)
AC_SUBST(LIBTRAYICON_CFLAGS)
AC_SUBST(LIBTRAYICON_LIBS)

dnl ----------------------------------------------

AC_ARG_ENABLE([evolution-sharp],
	 AC_HELP_STRING([--disable-evolution-sharp], [Disable evolution-sharp support (default auto)]),
	 enable_evo_sharp=$enableval,
	 enable_evo_sharp=auto)

EVOLUTION_SHARP_REQUIRED=0.6
AC_SUBST(EVO_SHARP_LIBS)
EVO_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix evolution-sharp`

PKG_CHECK_MODULES(EVO_SHARP,
   	 evolution-sharp >= $EVOLUTION_SHARP_REQUIRED, \
	 have_evo_sharp_dependencies=yes,
	 have_evo_sharp_dependencies=no)

if test "x$have_evo_sharp_dependencies" = "xno"; then

	dnl error out if user has explicitly requested evo-sharp
	if test "x$enable_evo_sharp" = "xyes"; then
		AC_MSG_ERROR([Could not find evolution-sharp])
	fi

	enable_evo_sharp="no (missing dependencies)"

else

	if test "x$enable_evo_sharp" != "xno"; then
		enable_evo_sharp="yes"
	else
		enable_evo_sharp="no (disabled)"
	fi

fi

AM_CONDITIONAL(ENABLE_EVO_SHARP, test "x$enable_evo_sharp" = "xyes")

dnl ----------------------------------------------

dnl Should we use our own copy of the sqlite bindings or the version
dnl that got installed along with mono?

use_local_sqlite="yes" # hard-wired for now
AM_CONDITIONAL(USE_LOCAL_SQLITE, test "x$use_local_sqlite" = "xyes")

dnl ----------------------------------------------

dnl beagled

PKG_CHECK_MODULES(GSF_SHARP, gsf-sharp >= 0.2, enable_gsf_sharp=yes, enable_gsf_sharp=no)
AM_CONDITIONAL(ENABLE_GSF_SHARP, test "x$enable_gsf_sharp" = "xyes")

dnl ----------------------------------------------
dnl GST# is not in a usable stage as of 9.3 release, disabling it.

PKG_CHECK_MODULES(GST_SHARP, gst-sharp >= __DISABLE_FOR_NOW__, enable_gst_sharp=yes, enable_gst_sharp=disabled)
AM_CONDITIONAL(ENABLE_GST_SHARP, test "x$enable_gst_sharp" = "xyes")

dnl ----------------------------------------------

dnl Needed to index jpeg metadata
LIBEXIF_API_CHANGE=0.6.0
LIBEXIF_REQUIRED_MIN=0.5.7
LIBEXIF_REQUIRED_MAX=0.7.0

PKG_CHECK_MODULES(LIBEXIF, libexif >= $LIBEXIF_REQUIRED_MIN libexif < $LIBEXIF_REQUIRED_MAX)
PKG_CHECK_MODULES(LIBEXIF_API_CHECK, libexif >= $LIBEXIF_API_CHANGE, have_old_libexif=no, have_old_libexif=yes)

if test "x$have_old_libexif" = "xyes"; then
	EXIF_SOVERSION=9
else
	PKG_CHECK_MODULES(LIBEXIF_VERSION_CHECK, libexif >= 0.6.12, EXIF_SOVERSION=12, EXIF_SOVERSION=10)
fi
AC_SUBST(EXIF_SOVERSION)

PKG_CHECK_MODULES(BEAGLED, gmime-sharp >= 2.1.15 gtk-sharp gconf-sharp)
BEAGLED_LIBS="$BEAGLED_LIBS $EVO_SHARP_LIBS $GSF_SHARP_LIBS"
AC_SUBST(BEAGLED_LIBS)

GSF_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix gsf-sharp`
GMIME_SHARP_PREFIX=`$PKG_CONFIG --variable=prefix gmime-sharp`

BEAGLE_DEFINES=""
AC_SUBST(BEAGLE_DEFINES)

dnl ----------------------------------------------
dnl libbeagle

GTK_DOC_CHECK(1.0)

AC_ARG_ENABLE([libbeagle],
	AC_HELP_STRING([--disable-libbeagle], [Disable libbeagle (C API)]),
	enable_libbeagle=$enableval,
	enable_libbeagle=auto)

dnl library versioning
dnl Increase when changing the API
LIBBEAGLE_CURRENT=0

dnl Update when changing implementation of current API,
dnl reset to 0 when changing CURRENT.  This is the revision of
dnl current API version
LIBBEAGLE_REVISION=0

dnl Increase of API change is ABI compatible, otherwise reset to 0
LIBBEAGLE_AGE=0

LIBBEAGLE_VERSION_INFO="$LIBBEAGLE_CURRENT:$LIBBEAGLE_REVISION:$LIBBEAGLE_AGE"
AC_SUBST(LIBBEAGLE_VERSION_INFO)

PKG_CHECK_MODULES(LIBBEAGLE, [
	gobject-2.0 >= 2.6
	libxml-2.0 >= 2.6.19
], have_libbeagle_deps=yes, have_libbeagle_deps=no)

AC_SUBST(LIBBEAGLE_CFLAGS)
AC_SUBST(LIBBEAGLE_LIBS)

if test "x$have_libbeagle_deps" = "xno"; then

	if test "x$enable_libbeagle" = "xyes"; then
		AC_MSG_ERROR([Missing libbeagle dependencies])
	fi

	enable_libbeagle="no (missing dependencies)"
else
	if test "x$enable_libbeagle" != "xno"; then
		enable_libbeagle="yes"
	else
		enable_libbeagle="no (disabled)"
	fi
fi

AM_CONDITIONAL(ENABLE_LIBBEAGLE, test "x$enable_libbeagle" = "xyes")

dnl ----------------------------------------------

dnl Epiphany Extension
dnl Much of this is cut&pasted from epiphany-extensions/configure.ac

AC_ARG_ENABLE([epiphany-extension],
	AC_HELP_STRING([--enable-epiphany-extension], [Enable Epiphany Extension (default auto)]),
	enable_epiphany_extension=$enableval,
	enable_epiphany_extension=auto)

if $PKG_CONFIG --exists epiphany-1.8; then
	EPIPHANY_MAJOR=1.8
	EPIPHANY_REQUIRED=1.7.0
elif $PKG_CONFIG --exists epiphany-1.6; then
	EPIPHANY_MAJOR=1.6
	EPIPHANY_REQUIRED=1.6.0
else
	enable_epiphany_extension="no (Epiphany not installed)"
fi

if test "x$enable_epiphany_extension" = "xyes"; then

LIBXML_REQUIRED=2.6.0
LIBGLIB_REQUIRED=2.4.0
LIBGTK_REQUIRED=2.4.0

AC_SUBST(EPIPHANY_REQUIRED)
AC_SUBST(LIBXML_REQUIRED)
AC_SUBST(LIBGLIB_REQUIRED)
AC_SUBST(LIBGTK_REQUIRED)

PKG_CHECK_MODULES(EPIPHANY_DEPENDENCY, \
		  libxml-2.0 >= $LIBXML_REQUIRED \
		  libglade-2.0 \
		  glib-2.0 >= $LIBGLIB_REQUIRED \
		  gmodule-2.0 \
		  gtk+-2.0 >= $LIBGTK_REQUIRED \
		  epiphany-$EPIPHANY_MAJOR >= $EPIPHANY_REQUIRED,
		  have_epiphany_dependencies=yes,
		  have_epiphany_dependencies=no)
AC_SUBST(EPIPHANY_DEPENDENCY_CFLAGS)
AC_SUBST(EPIPHANY_DEPENDENCY_LIBS)

EPIPHANY_EXTENSIONS_DIR="`$PKG_CONFIG --variable=extensionsdir epiphany-$EPIPHANY_MAJOR`"
AC_SUBST([EPIPHANY_EXTENSIONS_DIR])
EPIPHANY_PREFIX="`$PKG_CONFIG --variable=prefix epiphany-$EPIPHANY_MAJOR`"
AC_SUBST(EPIPHANY_PREFIX)

if test "x$have_epiphany_dependencies" = "xno"; then
	enable_epiphany_extension="no (missing dependencies)"
elif test "x$enable_epiphany_extension" != "xyes"; then
	enable_epiphany_extension="disabled"
fi

fi

AM_CONDITIONAL(ENABLE_EPIPHANY_EXTENSION, test "x$enable_epiphany_extension" = "xyes")

AC_ARG_ENABLE([epiphany-extension-install],
	AS_HELP_STRING([--enable-epiphany-extension-install],[Install Epiphany Extension]),
	[install_epiphany_extension=$enableval],
	[install_epiphany_extension=yes])

AM_CONDITIONAL([INSTALL_EPIPHANY_EXTENSION], [test "x$install_epiphany_extension" = "xyes"])

dnl ----------------------------------------------

dnl Galago

PKG_CHECK_MODULES(GALAGO, galago-sharp, enable_galago=yes, enable_galago=no)
AM_CONDITIONAL(ENABLE_GALAGO, test "x$enable_galago" = "xyes")
AC_SUBST(GALAGO_LIBS)


dnl ----------------------------------------------

GTK_BINARY_VERSION=`$PKG_CONFIG --variable=gtk_binary_version gtk+-2.0`
AC_SUBST(GTK_BINARY_VERSION)

dnl For the systeminfo glue

PKG_CHECK_MODULES(SYSTEMINFO_GLUE, gdk-2.0)
AC_PATH_XTRA
SYSTEMINFO_GLUE_X_LIBS="$X_PRE_LIBS $X_LIBS -lX11 -lXss $X_EXTRA_LIBS"
AC_SUBST(SYSTEMINFO_GLUE_X_LIBS)

dnl ----------------------------------------------

dnl For the wv1 glue

PKG_CHECK_MODULES(WV1, wv-1.0, enable_wv1=yes, enable_wv1=no)
AM_CONDITIONAL(ENABLE_WV1, test "x$enable_wv1" = "xyes")
AC_SUBST(WV1_LIBS)

dnl ----------------------------------------------

dnl Searchomatic

PKG_CHECK_MODULES(SEARCHOMATIC, gtk+-2.0)
AC_SUBST(SEARCHOMATIC_CFLAGS)
AC_SUBST(SEARCHOMATIC_LIBS)

dnl ----------------------------------------------

dnl Chooser-fu

PKG_CHECK_MODULES(CHOOSER_FU, gtk+-2.0)
AC_SUBST(CHOOSER_FU_CFLAGS)
AC_SUBST(CHOOSER_FU_LIBS)

dnl ----------------------------------------------

dnl KDE launcher/icon support

kde_prefix_print="unknown; will guess at runtime"
AC_PATH_PROG(KDE_CONFIG, [kde-config], [no])
if test ! "x$KDE_CONFIG" = "xno"; then
	KDE_PREFIX=`$KDE_CONFIG --prefix`
	kde_prefix_print="$KDE_PREFIX"
fi
AC_SUBST(KDE_PREFIX)

AC_ARG_ENABLE([webservices],
        AC_HELP_STRING([--enable-webservices], [Enable WebServices (default disabled)]),
        enable_webservices=$enableval,
        enable_webservices=no)

AM_CONDITIONAL(ENABLE_WEBSERVICES, test "x$enable_webservices" = "xyes")

dnl ----------------------------------------------
dnl Prefixes for helper scripts
GAC_PREFIX="$EVO_SHARP_PREFIX:$GSF_SHARP_PREFIX:$GMIME_SHARP_PREFIX"
dnl Remove duplicate prefixes
GAC_PREFIX="`echo $GAC_PREFIX | sed -e 's|:|\n|g' | sort | uniq | tr '\n' ':'`"
dnl Remove stray :s
GAC_PREFIX="`echo $GAC_PREFIX | sed -e 's|::\+|:|g' -e 's|^:\+||' -e 's|:\+$||'`"
AC_SUBST(GAC_PREFIX)

GNOME_PREFIX="`$PKG_CONFIG --variable=prefix libgnome-2.0`"
AC_SUBST(GNOME_PREFIX)

dnl ----------------------------------------------

dnl Check if the system has libchm, used by the CHMFilter

AC_CHECK_LIB(chm,chm_open,has_libchm=yes,has_libchm=no)
AM_CONDITIONAL(HAS_LIBCHM, test "x$has_libchm" = "xyes")

dnl ----------------------------------------------

AC_OUTPUT([
Makefile
Util/Makefile
Util/Util.dll.config
images/Makefile
templates/Makefile
glue/Makefile
BeagleClient/Makefile
beagled/Makefile
Filters/Makefile
Tiles/Makefile
tools/Makefile
Best/Makefile
ImLogViewer/Makefile
libbeagle/Makefile
libbeagle/libbeagle-0.0.pc
libbeagle/beagle/Makefile
libbeagle/examples/Makefile
libbeagle/docs/Makefile
libbeagle/docs/reference/Makefile
epiphany-extension/Makefile
mozilla-extension/Makefile
searchomatic/Makefile
chooser-fu/Makefile
beagle-0.0.pc
beagle-daemon.pc
beagle.spec
po/Makefile.in
])

echo "
	Target OS:		${os}
	Extended Attributes:	${XATTR_LIB}

	Prefix:			${prefix}
	GNOME Prefix:           ${GNOME_PREFIX}
	KDE Prefix:		${kde_prefix_print}

	Evolution-Sharp?	${enable_evo_sharp}
	gsf-sharp?		${enable_gsf_sharp}
	gst-sharp?		${enable_gst_sharp}
	Epiphany Extension?	${enable_epiphany_extension}
	Mozilla Extension?	yes
	wv1?			${enable_wv1}
	galago-sharp?		${enable_galago}
	libchm?			${has_libchm}

	Local SqliteClient?	${use_local_sqlite}

	Enable WebServices	${enable_webservices}
	Enable libbeagle	${enable_libbeagle}"
echo

if test "x$enable_epiphany_extension" = "xyes"; then
   echo "NOTE: The Beagle Epiphany Extension Is Totally Insecure!"
   echo "      Use it at your own risk!"
   echo
fi
