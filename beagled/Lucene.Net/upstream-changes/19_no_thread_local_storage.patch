From: Joe Shaw <joeshaw@novell.com>

Lucene uses thread-local storage for caching some data in a threadsafe way.
Mono up through 1.1.13.4 leaks all data set using Thread.SetData(), and this
accounts for huge memory spikes in Beagle in the file system backend on
inotify events and any time a query is run.  Instead we'll just declare the
items ThreadStatic. 

Index: Index/SegmentReader.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Index/SegmentReader.cs,v
retrieving revision 1.3
diff -u -p -r1.3 SegmentReader.cs
--- Index/SegmentReader.cs	6 Oct 2005 19:29:55 -0000	1.3
+++ Index/SegmentReader.cs	3 Apr 2006 17:09:07 -0000
@@ -36,8 +36,10 @@ namespace Lucene.Net.Index
 		private FieldsReader fieldsReader;
 		
 		internal TermInfosReader tis;
-        internal TermVectorsReader termVectorsReaderOrig = null;
-        internal System.LocalDataStoreSlot termVectorsLocal = System.Threading.Thread.AllocateDataSlot();
+		internal TermVectorsReader termVectorsReaderOrig = null;
+
+		[ThreadStatic]
+		private TermVectorsReader tvReader;
 		
 		internal BitVector deletedDocs = null;
 		private bool deletedDocsDirty = false;
@@ -172,19 +174,6 @@ namespace Lucene.Net.Index
 			}
 		}
 		
-        ~SegmentReader()
-        {
-            // patch for pre-1.4.2 JVMs, whose ThreadLocals leak
-            try
-            {            
-                System.Threading.Thread.SetData(termVectorsLocal, null);     // {{Aroush-1.9}} is this required for .NET ?!
-            }
-            catch (Exception ex)
-            {
-                // System.Console.WriteLine(ex.Message);
-            }
-        }
-		
 		protected internal override void  DoCommit()
 		{
 			if (deletedDocsDirty)
@@ -609,11 +598,9 @@ namespace Lucene.Net.Index
         /// </returns>
         private TermVectorsReader GetTermVectorsReader()
         {
-            TermVectorsReader tvReader = (TermVectorsReader) System.Threading.Thread.GetData(termVectorsLocal);
             if (tvReader == null)
             {
                 tvReader = (TermVectorsReader) termVectorsReaderOrig.Clone();
-                System.Threading.Thread.SetData(termVectorsLocal, tvReader);
             }
             return tvReader;
         }
Index: Index/TermInfosReader.cs
===================================================================
RCS file: /cvs/gnome/beagle/beagled/Lucene.Net/Index/TermInfosReader.cs,v
retrieving revision 1.4
diff -u -p -r1.4 TermInfosReader.cs
--- Index/TermInfosReader.cs	6 Oct 2005 19:29:55 -0000	1.4
+++ Index/TermInfosReader.cs	3 Apr 2006 17:09:07 -0000
@@ -28,8 +28,10 @@ namespace Lucene.Net.Index
 		private Directory directory;
 		private System.String segment;
 		private FieldInfos fieldInfos;
-		
-		private System.LocalDataStoreSlot enumerators = System.Threading.Thread.AllocateDataSlot();
+
+		[ThreadStatic]
+		private SegmentTermEnum termEnum;
+
 		private SegmentTermEnum origEnum;
 		private long size;
 		
@@ -50,20 +52,7 @@ namespace Lucene.Net.Index
 			
             indexEnum = new SegmentTermEnum(directory.OpenInput(segment + ".tii"), fieldInfos, true);
 		}
-		
-        ~TermInfosReader()
-        {
-            // patch for pre-1.4.2 JVMs, whose ThreadLocals leak
-            try
-            {
-                System.Threading.Thread.SetData(enumerators, null);     // {{Aroush-1.9}} is this required for .NET ?!
-            }
-            catch (Exception ex)
-            {
-                System.Console.WriteLine(ex.Message);
-            }
-        }
-		
+				
         public int GetSkipInterval()
 		{
 			return origEnum.skipInterval;
@@ -85,11 +74,9 @@ namespace Lucene.Net.Index
 		
 		private SegmentTermEnum GetEnum()
 		{
-			SegmentTermEnum termEnum = (SegmentTermEnum) System.Threading.Thread.GetData(enumerators);
 			if (termEnum == null)
 			{
 				termEnum = Terms();
-				System.Threading.Thread.SetData(enumerators, termEnum);
 			}
 			return termEnum;
 		}
